apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
//apply plugin: 'com.github.triplet.play'
//TODO uncomment line below after adding fabric api secret and key to fabric.properties
//apply plugin: 'io.fabric'

android {
    compileSdk 32

    defaultConfig {
        applicationId 'uk.co.ribot.androidboilerplate'
        minSdkVersion 21
        targetSdk 32
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode 1000
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName '0.1.0'
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'alias'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
    }
}

//play {
//    serviceAccountEmail = 'your-service-account-email'
//    pk12File = file('key.p12')
//    // By default publishes to Alpha channel
//    track = 'alpha'
//}

dependencies {
//    final PLAY_SERVICES_VERSION = '9.6.1'
    final SUPPORT_LIBRARY_VERSION = '25.3.1'
//    final RETROFIT_VERSION = '2.9.0'
    final DAGGER_VERSION = '2.5'
//    final MOCKITO_VERSION = '2.6.2'
    final HAMCREST_VERSION = '2.2'
    final ESPRESSO_VERSION = '2.2.1'
    final RUNNER_VERSION = '0.4'
    final BUTTERKNIFE_VERSION = '8.4.0'
    final AUTO_VALUE_VERSION = '1.5.2'
    final AUTO_VALUE_GSON_VERSION = '1.3.1'

//    def daggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    def jUnit = "junit:junit:4.13.2"
//    def mockito = "org.mockito:mockito-core:$MOCKITO_VERSION"

    implementation 'com.google.dagger:dagger:2.42'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.42'
    implementation 'com.google.dagger:dagger-android:2.42'
//    implementation 'com.google.dagger:dagger-android-support:2.42' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.42'

//    implementation 'com.google.dagger:dagger-android:2.42'
//    implementation 'com.google.dagger:dagger-android-support:2.42' // if you use the support libraries
//    annotationProcessor 'com.google.dagger:dagger-android-processor:2.42'
//    annotationProcessor 'com.google.dagger:dagger-compiler:2.42'
    // App Dependencies
//    implementation "com.google.android.gms:play-services-gcm:$PLAY_SERVICES_VERSION"
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.annotation:annotation:1.3.0'

    implementation ("com.squareup.sqlbrite2:sqlbrite:2.0.0") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
//    implementation "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
//    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
//    implementation "com.squareup.retrofit2:adapter-rxjava2:$RETROFIT_VERSION"

    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.9.0"

    implementation 'com.github.bumptech.glide:glide:4.13.2'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true;
    }

//    implementation 'com.jakewharton.timber:timber:5.0.1'
//  CAN  NOT USE 5.0.1  https://stackoverflow.com/questions/70870740/cannot-resolve-method-planttimber-log-timber-debugtree
    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation "com.jakewharton:butterknife:10.2.3"
    annotationProcessor "com.jakewharton:butterknife-compiler:10.2.3"

    // Replace provided dependency below with official AutoValue once this issue is fixed

//    compileOnly 'com.google.auto.value:auto-value:1.9'


    // https://github.com/google/auto/issues/268
//    annotationProcessor "com.google.auto.value:auto-value:$AUTO_VALUE_VERSION"
//    implementation "com.google.auto.value:auto-value-gson:$AUTO_VALUE_GSON_VERSION"



//    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:1.3.1"
////    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:1.3.1"
////    annotationProcessor "com.google.auto.value:auto-value:$AUTO_VALUE_VERSION"
//    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.9'
    annotationProcessor("com.ryanharter.auto.value:auto-value-gson-extension:1.3.1")
    implementation("com.ryanharter.auto.value:auto-value-gson-runtime:1.3.1")
    annotationProcessor 'com.jakewharton.auto.value:auto-value-annotations:1.5'
// Optional @GsonTypeAdapterFactory support
    annotationProcessor("com.ryanharter.auto.value:auto-value-gson-factory:1.3.1")


    annotationProcessor 'com.google.auto.value:auto-value:1.7.4'
    implementation 'com.google.auto.value:auto-value-annotations:1.7.4'

//    annotationProcessor 'com.google.auto.value:auto-value:1.9'
//    implementation 'com.google.auto.value:auto-value-annotations:1.9'

// Legacy generic artifact that includes both -extension and -factory above. This exists to not
// break existing users, but shouldn't be used because it includes both the -factory artifact as
// well as the -extension artifact. This can have a negative impact on build times if you don't
// actually use the factory support, as it is an aggregating incremental processor thus slower
// compared to just using the isolating incremental behavior of the extension.
    annotationProcessor("com.ryanharter.auto.value:auto-value-gson:1.3.1")



    annotationProcessor 'com.squareup:javapoet:1.13.0'
    // https://github.com/rharter/auto-value-parcel/issues/64

    implementation  "com.google.dagger:dagger:2.42"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28' //Required by Dagger2
    annotationProcessor "com.google.dagger:dagger-compiler:2.42"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:2.42"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:2.42"

    implementation 'com.google.dagger:dagger-android:2.42'
    implementation 'com.google.dagger:dagger-android-support:2.42' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.42'
//    androidTestCompileAnnotationProcessor "com.google.dagger:dagger-compiler:2.42"

    // Instrumentation test dependencies
    androidTestImplementation jUnit
    androidTestImplementation "org.mockito:mockito-core:4.6.1"
    androidTestImplementation "org.mockito:mockito-android:4.6.1"
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.4.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    // Unit tests dependencies
    testImplementation jUnit
    testImplementation "org.mockito:mockito-core:4.6.1"
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
//    testImplementation "org.hamcrest:hamcrest-library:$HAMCREST_VERSION"
    testImplementation "org.hamcrest:hamcrest-library:2.2"
    testImplementation 'org.hamcrest:hamcrest-integration:1.3'
    testImplementation 'org.robolectric:robolectric:4.8.1'
}

// Log out test results to console
//tasks.matching {it instanceof Test}.all {
//    testLogging.events = ["failed", "passed", "skipped"]
//}

//test {
//    testLogging {
//        events "passed", "skipped", "failed", "standardOut", "standardError"
//    }
//}


//import org.gradle.api.tasks.testing.logging.TestExceptionFormat
//import org.gradle.api.tasks.testing.logging.TestLogEvent
//
//tasks.withType(Test) {
//    testLogging {
//        // set options for log level LIFECYCLE
//        events TestLogEvent.FAILED,
//                TestLogEvent.PASSED,
//                TestLogEvent.SKIPPED,
//                TestLogEvent.STANDARD_OUT
//        exceptionFormat TestExceptionFormat.FULL
//        showExceptions true
//        showCauses true
//        showStackTraces true
//
//        // set options for log level DEBUG and INFO
//        debug {
//            events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//            exceptionFormat TestExceptionFormat.FULL
//        }
//        info.events = debug.events
//        info.exceptionFormat = debug.exceptionFormat
//
//        afterSuite { desc, result ->
//            if (!desc.parent) { // will match the outermost suite
//                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
//                def startItem = '|  ', endItem = '  |'
//                def repeatLength = startItem.length() + output.length() + endItem.length()
//                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
//            }
//        }
//    }
//}